{"version":3,"sources":["ToDo.js","ToDoForm.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["ToDo","todo","toggleTask","removeTask","className","complete","onClick","id","task","ToDoForm","addTask","useState","userInput","setUserInput","handleSubmit","e","preventDefault","onSubmit","value","type","onChange","currentTarget","onKeyDown","key","placeholder","navigator","serviceWorker","register","App","todos","setTodos","filter","handleToggle","map","length","newItem","Math","random","toString","substr","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.07c5fc5a.chunk.js","sourcesContent":["function ToDo({ todo, toggleTask, removeTask }) {\n    return (\n        <div key={todo.id} className=\"item-todo\">\n            <div \n                className={todo.complete ? \"item-text strike\" : \"item-text\"}\n                onClick={() => toggleTask(todo.id)}\n                >\n                {todo.task}\n            </div>\n            <div className=\"item-delete\" onClick={() => removeTask(todo.id)}>\n                X\n            </div>\n        </div>\n    )\n}\n\nexport default ToDo","import { useState } from 'react'\n\nfunction ToDoForm({ addTask }) {\n    const [userInput, setUserInput] = useState('')\n\n    const handleChange = (e) => {\n        setUserInput(e.currentTarget.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        addTask(userInput)\n        setUserInput(\"\")\n    }\n\n    const handleKeyPress = (e) => {\n        if(e.key === \"Enter\") {\n            handleSubmit(e)\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                value={userInput}\n                type=\"text\"\n                onChange={handleChange}\n                onKeyDown={handleKeyPress}\n                placeholder=\"Введите задачу..\"\n            />\n            <button>Сохранить</button>\n        </form>\n    )\n}\n\nexport default ToDoForm","import { useState } from 'react'\nimport ToDo from './ToDo'\nimport ToDoForm from './ToDoForm'\n\nfunction App() {\n  const [todos, setTodos] = useState([])\n\n  const addTask = (userInput) => {\n    if(userInput) {\n      const newItem = {\n        id: Math.random().toString(36).substr(2,9),\n        task: userInput,\n        complete: false\n      }\n      setTodos([...todos, newItem])\n    }\n  }\n\n  const removeTask = (id) => {\n    setTodos([...todos.filter((todo) => todo.id !== id)])\n  }\n\n  const handleToggle = (id) => {\n    setTodos([\n      ...todos.map((todo) =>\n        todo.id === id ? { ...todo, complete: !todo.complete } : {...todo }\n      )\n    ])\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Список задач: {todos.length}</h1>\n      </header>\n      <ToDoForm addTask={addTask} />\n      {todos.map((todo) => {\n        return (\n          <ToDo\n            todo={todo}\n            key={todo.id}\n            toggleTask={handleToggle}\n            removeTask={removeTask}\n            />\n        )\n      })}\n    </div>\n  );\n}\nif('serviceWorker' in navigator) {\n  navigator.serviceWorker.register('service-worker.js');\n};\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}